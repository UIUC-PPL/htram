module htram_group{
  readonly CProxy_HTram tram_proxy;
  readonly CProxy_HTramRecv nodeGrpProxy;
  readonly CProxy_HTramNodeGrp srcNodeGrpProxy;
  initnode void registerMsgStatsCollection(void);
  message HTramMessage {
    itemT *buffer;
    int next; 
  };

  message HTramLocalMessage {
    itemT *buffer;
    int next;
  };

  message HTramNodeMessage {
    datatype *buffer;
    int *offset;
  };
//#define SRC_GROUPING
//#define PER_DESTPE_BUFFER
//#define LOCAL_BUF
  group HTram {
    entry HTram(CkGroupID, int, bool, double, bool);
    entry HTram(CkGroupID gid, CkCallback cb);
    entry void avgLatency(CkCallback cb);
    entry void tflush();
//#ifdef SRC_GROUPING
    entry void receivePerPE(HTramMessage*);
//#elif defined PER_DESTPE_BUFFER
    entry void receiveOnPE(HTramMessage* msg);
//#else
    entry void receivePerPE(HTramNodeMessage*);
//#endif
    entry void stop_periodic_flush();
  };

  nodegroup HTramNodeGrp {
    entry HTramNodeGrp();
  };

  nodegroup HTramRecv {
    entry HTramRecv();
//#ifndef PER_DESTPE_BUFFER
    entry [expedited] void receive(HTramMessage*);
    entry void receive_no_sort(HTramMessage*);
//#ifdef LOCAL_BUF
    entry void receive_small(HTramLocalMessage*);
    entry void avgLatency(CkCallback cb);
//#endif
//#endif
  }
};
